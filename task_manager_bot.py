import asyncio
import logging
import os
import json
from datetime import datetime
from typing import List, Dict
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State


load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN not found in .env file")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

DATA_FILE = "tasks.json"

def load_data() -> Dict[str, List[dict]]:
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data: Dict[str, List[dict]]):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


class AddState(StatesGroup):
    waiting_for_text = State()

class DeleteState(StatesGroup):
    waiting_for_index = State()

class DoneState(StatesGroup):
    waiting_for_index = State()

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [KeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏")],
        [
            KeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"),
            KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
        ]
    ],
    resize_keyboard=True
)

cancel_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True
)

def format_tasks(user_id: str, data: Dict[str, List[dict]]) -> str:
    tasks = data.get(user_id, [])
    if not tasks:
        return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á ‚úÖ"
    lines = []
    for i, task in enumerate(tasks, start=1):
        status = "‚úÖ" if task["done"] else "‚ùå"
        lines.append(f"{i}. {task['title']} {status}")
    return "\n".join(lines)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π Task Manager üìù\n"
        "–ú–æ–≥—É —Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏, –æ—Ç–º–µ—á–∞—Ç—å –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è—Ç—å.\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_kb
    )

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_task(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:", reply_markup=cancel_kb)
    await state.set_state(AddState.waiting_for_text)

@dp.message(AddState.waiting_for_text)
async def process_add(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚úÖ", reply_markup=main_kb)
        return

    data = load_data()
    user_id = str(message.from_user.id)
    task = {
        "title": message.text,
        "done": False,
        "created_at": datetime.now().isoformat()
    }
    data.setdefault(user_id, []).append(task)
    save_data(data)
    await state.clear()
    await message.answer(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ\n{message.text}", reply_markup=main_kb)

@dp.message(F.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏")
async def list_tasks(message: types.Message):
    data = load_data()
    user_id = str(message.from_user.id)
    text = format_tasks(user_id, data)
    await message.answer(text)

@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
async def delete_task(message: types.Message, state: FSMContext):
    data = load_data()
    user_id = str(message.from_user.id)
    text = format_tasks(user_id, data)
    if text == "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á ‚úÖ":
        await message.answer(text)
        return
    await message.answer("–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n" + text + "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=cancel_kb)
    await state.set_state(DeleteState.waiting_for_index)


@dp.message(DeleteState.waiting_for_index)
async def process_delete(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ", reply_markup=main_kb)
        return
    data = load_data()
    user_id = str(message.from_user.id)
    try:
        idx = int(message.text) - 1
        if idx < 0 or idx >= len(data.get(user_id, [])):
            raise IndexError
    except (ValueError, IndexError):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä ‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    task = data[user_id].pop(idx)
    save_data(data)
    await state.clear()
    await message.answer(f"–ó–∞–¥–∞—á–∞ ¬´{task['title']}¬ª —É–¥–∞–ª–µ–Ω–∞ ‚úÖ", reply_markup=main_kb)

@dp.message(F.text == "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π")
async def done_task(message: types.Message, state: FSMContext):
    data = load_data()
    user_id = str(message.from_user.id)
    text = format_tasks(user_id, data)
    if text == "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á ‚úÖ":
        await message.answer(text)
        return
    await message.answer("–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n" + text + "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:", reply_markup=cancel_kb)
    await state.set_state(DoneState.waiting_for_index)

@dp.message(DoneState.waiting_for_index)
async def process_done(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚úÖ", reply_markup=main_kb)
        return

    data = load_data()
    user_id = str(message.from_user.id)
    try:
        idx = int(message.text) - 1
        if idx < 0 or idx >= len(data.get(user_id, [])):
            raise IndexError
    except (ValueError, IndexError):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä ‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    data[user_id][idx]["done"] = True
    save_data(data)
    await state.clear()
    await message.answer(f"–ó–∞–¥–∞—á–∞ ‚Ññ{idx+1} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è ‚úÖ", reply_markup=main_kb)

async def main():
    logger.info("Bot started")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
